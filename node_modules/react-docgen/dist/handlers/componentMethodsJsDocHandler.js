/*
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

// Merges two objects ignoring null/undefined.
'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = componentMethodsJsDocHandler;

var _utilsParseJsDoc = require('../utils/parseJsDoc');

var _utilsParseJsDoc2 = _interopRequireDefault(_utilsParseJsDoc);

function merge(obj1, obj2) {
  if (obj1 == null && obj2 == null) {
    return null;
  }
  var merged = _extends({}, obj1);
  for (var prop in obj2) {
    if (obj2[prop] != null) {
      merged[prop] = obj2[prop];
    }
  }
  return merged;
}
/**
 * Extract info from the methods jsdoc blocks. Must be run after
 * flowComponentMethodsHandler.
 */

function componentMethodsJsDocHandler(documentation) {
  var methods = documentation.get('methods');
  if (!methods) {
    return;
  }

  methods = methods.map(function (method) {
    if (!method.docblock) {
      return method;
    }

    var jsDoc = (0, _utilsParseJsDoc2['default'])(method.docblock);

    var returns = merge(jsDoc.returns, method.returns);
    var params = method.params.map(function (param) {
      var jsDocParam = jsDoc.params.find(function (p) {
        return p.name === param.name;
      });
      return merge(jsDocParam, param);
    });

    return _extends({}, method, {
      description: jsDoc.description || null,
      returns: returns,
      params: params
    });
  });

  documentation.set('methods', methods);
}

module.exports = exports['default'];